<% 
    pageTitle = "Extensions"
%>
<% include ./partials/head %>
        
        <p>This page covers additional extensions for XMPP-FTW. The first of these will be 
        supporting <a href="http://www.superfeedr.com" target="_blank">SuperFeedr</a> with 
        <a href="http://www.buddycloud.com" target="_blank">buddycloud</a> coming after 
        that.</p>

        <p><strong>Note:</strong> It is planned that these extensions will be seperated 
        from the main XMPP-FTW package, but in the short term they are included, but 
        not loaded by default.</p>

        <p>These extensions are loaded into the XMPP-FTW 
        <a href="/demo" title="XMPP-FTW Demo">demo client</a>. This document follows the 
        <a href="/manual#colour-conventions">conventions</a> of the main 
        <a href="/manual">manual page</a>.</p> 
        
        <div id="toc"></div>
        
        <h2>SuperFeedr</h2>

        <p>For more information about the Superfeedr XMPP API please see: 
        <a href="http://superfeedr.com/documentation#pubsubhubbub" target="_blank">
        http://superfeedr.com/documentation#pubsubhubbub</a>.</p>

        <h3>Subscribe to a feed</h3>
        
        <p>Whilst superfeedr allows users to subscribe to multiple feeds in one request 
        for simplicity this is restricted to a single subscription per request.</p>

        <pre class="out callback" message="xmpp.superfeedr.subscribe">
        socket.emit(
            'xmpp.superfeedr.subscribe',
            {                
                "feed": "http://www.evilprofessor.co.uk/feed",
             /* "jid": "website@evilprofessor.co.uk" */
            },
            function(error, data) { console.log(error, data) }
        )
        </pre>
        
        <p>If no JID is provided this defaults to the jid used to log in to the 
        server with.</p>
        
        <p>If a subscription is successful then the response will look like the following:</p>
        
        <pre class="example">
        {
            "feed": "http://www.evilprofessor.co.uk/feed",
            "jid": "lloyd@evilprofessor.co.uk/sky",
            "title": "Building a time machine from a Delorean",
            "status": {
                "response": 200,
                "fetch": {
                    "last": "1955-11-05T06:30:11-08:00",
                    "next": "1985-10-27T01:22:38-08:00",
                    "period": "3600"
                },
                "parsed": "1985-10-27T10:30:00-08:00",
                "maintenance": "1985-10-27T09:59:00-08:00",
                "message": "9718 bytes fetched in 1.462708s : 2 new entries."
            }
        }
        </pre>
        
        <h3>Unsubscribe from a feed</h3>
        
        <pre class="out callback" message="xmpp.superfeedr.unsubscribe">
        socket.emit(
            'xmpp.superfeedr.unsubscribe',
            {
                "feed": "https://github.com/lloydwatkin.atom",
             /* "jid": "github@evilprofessor.co.uk" */
            },
            function(error, data) { console.log(error, data) }
        )
        </pre>
        
        <p>If there is no error `<em>data</em>` will simply be <b>true</b>.

        <h3>Get Subscriptions</h3>

        <pre class="out callback" message="xmpp.superfeedr.subscriptions">
        socket.emit(
            'xmpp.superfeedr.subscriptions',
            {
              /* "page": 1 */
            },
            function(error, data) { console.log(error, data) }
        </pre>

        <p>Response will then appear as follows:</p>

        <pre class="example">
        [
            {
                "feed": "http://www.evilprofessor.co.uk/feed",
                "jid": "lloyd@evilprofessor.co.uk/sky",
                "title": "Building a time machine from a Delorean",
                "status": {
                    "response": 200,
                    "fetch": {
                        "last": "1955-11-05T06:30:11-08:00",
                        "next": "1985-10-27T01:22:38-08:00",
                        "period": "3600"
                    },
                    "parsed": "1985-10-27T10:30:00-08:00",
                    "maintenance": "1985-10-27T09:59:00-08:00",
                    "message": "9718 bytes fetched in 1.462708s : 2 new entries."
                }
            }
        ]
        </pre>

        <h3>Items</h3>

        <p>An example of an item is as follows:</p>

        <pre class="example">
        {
            "title": "Hello world",
            "id": "http://push-pub.appspot.com/feed/793002",
            "updated": "2013-05-12T15:34:15Z",
            "published": "2013-05-12T15:34:15Z",
            "content": { 
                "type": "text",
                "content": "Get a notification"
            },  
            "links": [
                {
                    "title": "Hello world",
                    "rel": "alternate",
                    "href": "http://push-pub.appspot.com/entry/793002",
                    "type": "text/html"
                }   
            ]   
        }
        </pre>

        <h4>New Item Notifications</h4>

        <pre class="in" message="xmpp.superfeedr.push">
        {
            meta: {
                "response": 200,
                "fetch": {
                    "last": "1955-11-05T06:30:11-08:00",
                    "next": "1985-10-27T01:22:38-08:00",
                    "period": "3600"
                },
                "parsed": "1985-10-27T10:30:00-08:00",
                "maintenance": "1985-10-27T09:59:00-08:00",
                "message": "9718 bytes fetched in 1.462708s : 2 new entries."
             },
             items: "items": [
                 { ... }
             ]
        }
        </pre>

        <h4>Item Retrieval</h4>
        
        <pre class="out callback" message="xmpp.superfeedr.retrieve">
        socket.emit(
            'xmpp.superfeedr.retrieve',
            {
                "feed": "http://www.evilprofessor.co.uk/feed"
            },
            function(error, data) { console.log(error, data) }
        )
        </pre>
        
        <p>Example response:</p>

        <pre class="example">
        {
            meta: {
                "response": 200,
                "fetch": {
                    "last": "1955-11-05T06:30:11-08:00",
                    "next": "1985-10-27T01:22:38-08:00",
                    "period": "3600"
                },  
                "parsed": "1985-10-27T10:30:00-08:00",
                "maintenance": "1985-10-27T09:59:00-08:00",
                "message": "9718 bytes fetched in 1.462708s : 2 new entries."
             },
             items: [
                { ... }
             ]
        }
        </pre>

        <h2>buddycloud</h2>

        <p><strong>Note:</strong> Work in progress.</p>

        <p><a href="http://www.buddycloud.com" target="_blank">buddycloud</a> 
        is a open source/standards federated social network built on top 
        of XMPP. For more information about the future of social networking 
        please see the 
        <a href="http://www.buddycloud.com" target="_blank">buddycloud website</a>.</p>

        <h3>Discover buddycloud server</h3>

        <p>The first thing you must do is to discover your buddycloud 
        server. <strong>Any attempted actions before the discovery 
        will result in an error response</strong>.</p>

        <pre class="out callback" message="xmpp.buddycloud.discover">
        socket.emit(
            'xmpp.buddycloud.discover',
            {},
            function(error, data) { console.log(error, data) }
        )
        </pre>

        <p>If a server is discovered the `<em>data</em>` will contain the 
        channel server host, if not `<em>error</em>` will be populated to 
        tell you that no server was found.</p>

        <h3>Presence</h3>

        <p>Presence must be sent to the buddycloud server in order to 
        start receiving notifications. Default presence is set as 'online' 
        with a priority of -1, and a status of 'buddycloud'.</p>

        <p>For more advanced priority setting it is suggested that you use 
        '<em>xmpp.presence</em>'.</p>
 
        <pre class="out" message="xmpp.buddycloud.presence">
        socket.emit('xmpp.buddycloud.presence', {})
        </pre>

        <h3>Registration</h3>

        <p>The first time you use a buddycloud server you should register with 
        it in order to generate your personal nodes. Multiple registrations 
        will not cause an error.</p>

        <pre class="out callback" message="xmpp.buddycloud.register">
        socket.emit(
            'xmpp.buddycloud.register',
            {},
            function(error, data) { console.log(error, data) }
        )
        </pre>

        <p>A successful response will look as follows:</p>

        <pre class="example">
        { registered: true }
        </pre>

        <p>In the unlikely event of an error upon registration these will formatted 
        in the same style as <a href="/manual/in-band-registration">xmpp-ftw-register</a>.</p>

        <h3>Create a node</h3>

        <pre class="out callback" message="xmpp.buddycloud.create">
        socket.emit(
            'xmpp.buddycloud.create',
            { 
                "node": "xmpp-ftw updates",
             /* "options": [] */
            },
            function(error, data) { console.log(error, data) }
        )
        </pre>
        
        <p><strong>options</strong> should be formatted as a data form 
        in order to add node configuration options at creation time.</p>

        <p>If the node is successfully created `<em>error</em>` will be <b>null</b> and 
        `<em>data</em>` will be <b>true</b>.</p>

        <h3>Publishing to a node</h3>

        <pre class="out callback" message="xmpp.buddycloud.publish">
        socket.emit(
            'xmpp.buddycloud.publish',
            {
                "node": "/user/lloyd@buddycloud.org/posts",
                "content": {
                    "atom": {
                        "content": "Posting from XMPP-FTW"
                    },
                    "in-reply-to": { "ref": "1234-5678-9087-6543" }
                }
            },
            function(error, data) { console.log(error, data) }
        </pre>

        <h3>Subscriptions</h3>

        <h4>Subscribe to a node</h4>

        <pre class="out callback" message="xmpp.buddycloud.subscribe">
        socket.emit(
            'xmpp.buddycloud.subscribe',
            {
                "node": "/user/lloyd@buddycloud.org/posts"
            },
            function(error, data) { console.log(error, data) }
        )
        </pre>

        <p>If a subscription is successful then the value of `<em>data</em>` 
        will be as follows:</p>

        <pre class="example">
        {
            subscription: "subscribed"
        }
        </pre>

        <h4>Unsubscribe from a node</h4>

        <pre class="out callback" message="xmpp.buddycloud.unsubscribe">
        socket.emit(
            'xmpp.buddycloud.unsubscribe',
            {
                "node": "/user/lloyd@buddycloud.org/posts"
            },
            function(error, data) { console.log(error, data) }
        )
        </pre>
      
        <p>If there is no `<em>error</em>` then `<em>data</em>` will 
        simply be true.</p>

        <h4>Get subscriptions</h4>

        <p>This method supports RSM.</p>

        <pre class="out callback" message="xmpp.buddycloud.subscriptions">
        socket.emit(
            'xmpp.buddycloud.subscriptions',
            {
             /* "node": "xmpp-ftw updates", */
             /* "owner": true */
            },
            function(error, data) { console.log(error, data) }
        )
        </pre>
        
        <p>Setting <strong>owner</strong> to true will return information 
        about all subscriptions to that node. This is provided you are 
        the owner of the node, otherwise an error will be returned.</p>

        <p>A successful response will then be as follows:</p>

        <pre class="example">
        [
            { 
                node: "/user/lloyd@evilprofessor.co.uk/posts", 
                jid: { user: "lloyd", domain: "evilprofessor.co.uk" },
                subscription: "subscribed"
            },
            { 
                node: "/user/megan@evilprofessor.co.uk/posts",
                jid: { user: "lloyd", domain: "evilprofessor.co.uk" },
                subscription: "pending"
            }
        ]
        </pre>

        <h4>Updating a subscribers subscription</h4>

        <p>As a node owner, or moderator, it is also possible to update 
        the subscription state of a user as follows:</p>

        <pre class="out callback" message="xmpp.buddycloud.subscription">
        socket.emit(
            'xmpp.pubsub.subscription',
            {
                "node":          "/user/lloyd@evilprofessor.co.uk/posts",
                "jid":           "bad-person@evilprofessor.co.uk", 
                "subscription" : "none"
            },
            function(error, data) { console.log(error, data) }
        )
        </pre>

        <p>On success the <em>data</em> argument will simply be 
        <strong>true</strong>.</p>

        <h4>Notification of a subscription change</h4>

        <p>In the event of a subscription change all node subscribers 
        are informed via the `<em>xmpp.buddycloud.push.subscription</em>` 
        event:</p>

        <pre class="in" message="xmpp.buddycloud.push.subscription">
        {
            node: "xmpp-ftw updates",
            jid: "megan@evilprofessor.co.uk",
            subscription: "subscribed",
        }  
        </pre>

        <h4>Subscription authorisation request</h4>

        <p>If required, and if supported by the server, a node owner, 
        or moderator, will receive a subscription authorisation request 
        as follows:</p>

        <pre class="in callback" message="xmpp.buddycloud.push.authorisation">
        socket.on('xmpp.buddycloud.push.authorisation', function(data, callback) {
            console.log(data)
            callback( /* see below */ )
        })
        </pre>
  
        <p>With the data in the following format:</p>

        <pre class="example">
        {
            id: "approve1",
            form: {}
        }
        </pre>
         
        <ul>
          <li>The `<em>form</em>` property being parsed as a standard 
          <a href="/data-form" title="Data form">data form</a>.</li>
          <li>The data form will contain node information, therefore this 
          is not included in the standard fields.</li>
        </ul>

        <p>In order to reply to a subscription authorisation request the 
        callback function should be used as follows (actual field data 
        will depend on received data form):</p>

        <pre class="example">
        [
            { var: "pubsub#node", value: "/user/lloyd@evilprofessor.co.uk/posts" },
            { var: "pubsub#subscriber_jid": value: "megan@evilprofessor.co.uk" },
            { var: "pubsub#allow", value: "true" }
        ]
        </pre>

        <h3>Affiliations</h3>
        
        <h4>Get node affiliations</h4>
        
        <p>This method supports RSM.</p>

        <pre class="out callback" message="xmpp.buddycloud.affiliations">
        socket.emit(
            'xmpp.buddycloud.affiliations',
            {
             /* "node": "/user/lloyd@evilprofessor.co.uk/posts", */
             /* "owner": true" */
            },
            function(error, data) { console.log(error, data) }
        )
        </pre>
        
        <p>Setting <strong>owner</strong> to true allows the user to 
        get a list of all node affiliations provided they are the owner 
        of the node (otherwise an error is returned.</p>

        <p>A successful response will then be as follows:</p>
        
        <pre class="example">
        [
           { 
                jid: { user: "lloyd", domain: "evilprofessor.co.uk" },
                affiliation: 'owner'
           },
           {
                jid: { user: "dev-kitty-1", domain: "evilprofessor.co.uk" },
                affiliation: 'member'
           }
        ]
        </pre>

        <h4>Set node affiliation</h4>
      
        <pre class="out callback" message="xmpp.buddycloud.affiliation">
        socket.emit(
            'xmpp.buddycloud.affiliation',
            {
                "node": "/user/lloyd@evilprofessor.co.uk/posts",
                "jid": "troll@underthebrid.ge",
                "affiliation": "outcast"
            },
            function(error, data) { console.log(error, data) }
        )
        </pre>
        
        <p>If the node is successfully created `<em>error</em>` will be <b>null</b> and 
        `<em>data</em>` will be <b>true</b>.</p>
        
        <p><b>Note:</b> Whilst specification allows user to update several 
        affiliation changes at once, only on per message is supported 
        here. If required it can be added later.</p>
        
        <h4>Notification of affiliation changes</h4>

        <p>The event name for these changes is `<em>xmpp.buddycloud.push.affiliation</em>`.</p>

        <pre class="in" message="xmpp.buddycloud.push.affiliation">
        {
            node: "/user/lloyd@evilprofessor.co.uk/posts",
            jid: {
                domain: "evilprofessor.co.uk",
                user: "bad-person"
            },
            affiliation: "none"
        }
        </pre>

        <h3>Items</h3>

        <h4>Retrieve items</h4>

        <p>Retrieve items from a buddycloud node. For information about 
        how RSM is supported please see 
        <a href="/manual/result-set-management">result set management</a>.</p>

        <pre class="out callback" message="xmpp.buddycloud.retrieve">
        socket.emit(
            'xmpp.buddycloud.retrieve',
            {
                "node": "/user/lloyd@buddycloud.org/posts"
            },
            function(error, data) { console.log(error, data) }
        )
        </pre>

        <p>Items are parsed using `xmpp-ftw-item-parse` although it is 
        possible to inject your own parser.  Additonal features of the 
        item will be come available as this project adds support.</p>

        <p>Unlike `xmpp-ftw-pubsub` items will always include a 
        <strong>node</strong> key.</p>

        <h4>Notification of new messages</h4>

        <p>When an item is published to a node that your user is
        subscribed to then a message will be received with item
        details.</p>

        <pre class="in" message="xmpp.buddycloud.push.item">
        socket.on('xmpp.buddycloud.push.item', function(data) {
            console.log(data)
        })
        </pre>
        
        <p>The item itself is parsed by `<em>xmpp-ftw-item-parser</em>`
        and is held in the <strong>item</strong> key.</p>

        <pre class="example">
        {
            from: 'channels.evilprofessor.co.uk',
            node: '/user/weather@server.com/posts',
            id:   '201305301825',
            item: ...as parsed by xmpp-ftw-item-parser...
        }
        </pre>

        <h4>Retrieve recent items</h4>

        <p>Retrieve recent items for subscribed nodes by requesting using 
        the following event name (this message supports 
        <a href="/manual/result-set-management" 
           title="Result set management">RSM</a>):</p>

        <pre class="out callback" message="xmpp.buddycloud.items.recent">
        socket.emit(
            'xmpp.buddycloud.items.recent',
            {
              /* "max": 50, */
              /* "since": "2013-07-01 16:02:00" */
            },
            function(error, data, rsm) { console.log(error, data, rsm) }
        )
        </pre>

        <p>Whilst both <em>max</em> and <em>since</em> are optional it is 
        suggested values are provided. <em>max</em> will default to 
        <strong>30</strong> if not set, whilst <em>since</em> will default 
        to <strong>1st January 2000</strong> if not set. <em>since</em> will 
        accept any string which can be parsed by <code>Date.parse()</code>.</p>

        <p>Output data has the following format:</p>

        <pre class="example">
        [
            {
                node: '/user/lloyd@evilprofessor.co.uk/posts',
                id: 'item-1',
                entry: //... a parsed by xmpp-ftw-item-parser ...//
            },
            {
                node: '/user/megan@evilprofessor.co.uk/posts',
                id: 'item-3',
                entry: //... a parsed by xmpp-ftw-item-parser ...//
            },
            {
                node: '/user/lloyd@evilprofessor.co.uk/posts',
                id: 'item-5',
                entry: //... a parsed by xmpp-ftw-item-parser ...//
            },      

        ]
        </pre>

        <h4>Item Thread</h4>

        <p>Retrieve a full post thread as follows (RSM supported):</p>

        <pre class="out callback" message="xmpp.buddycloud.items.thread">
        socket.emit(
            'xmpp.buddycloud.items.thread',
            {
                "node": "/user/lloyd@evilprofessor.co.uk/posts",
                "id": "1234-5678-9012-3456"
            },
            function(error, data, rsm) { console.log(error, data, rsm) }
        )
        </pre>

        <p>Responses then look like the following:</p>

        <pre class="example">
        [
            {
                id: '1234-5678-9012-3457',
                node: "/user/lloyd@evilprofessor.co.uk/posts",
                entry: //... as parsed by xmpp-ftw-item-parser ...//
            }
        ]
        </pre>

        <h4>Item Replies</h4>

        <p>Retrieve all replies to a post as follows (RSM supported):</p>

        <pre class="out callback" message="xmpp.buddycloud.items.replies">
        socket.emit(
            'xmpp.buddycloud.items.replies',
            {
                "node": "/user/lloyd@evilprofessor.co.uk/posts",
                "id": "1234-5678-9012-3456"
            },
            function(error, data, rsm) { console.log(error, data, rsm) }
        )
        </pre>

        <p>Responses then look like the following:</p>

        <pre class="example">
        [
            { 
                id: '1234-5678-9012-3457',
                entry: //... as parsed by xmpp-ftw-item-parser ...//
                node: "/user/lloyd@evilprofessor.co.uk/posts",
            }
        ]
        </pre>

        <h4>Delete an item</h4>
  
        <pre class="out callback" message="xmpp.buddycloud.item.delete">
        socket.emit(
            'xmpp.buddycloud.item.delete',
            {
                "node": "/user/lloyd@buddycloud.org/posts",
                "id": "1"
            },
            function(error, data) { console.log(error, data) }
        )        
        </pre>
 
        <p>If the delete is successful then `<em>data</em>` will simply 
        be <strong>true</strong>.</p>

        <h5>Item deletion notification</h5>

        <p>If an item is successfully deleted from a node then all 
        subscribers will be notified of this event (configuration
        dependent).</p>

        <pre class="in" message="xmpp.pubsub.push.retract">
        socket.on('xmpp.pubsub.push.retract', function(data) {
            console.log(data)
        })
        </pre>

        <p>With the payload as follows:</p>

        <pre class="example">
        {
            node: '/user/weather@topics.evilprofessor.co.uk',
            id: '222'
        }
        </pre>

        <h3>Configuring a node</h3>

        <p>Node configuration follows that of the 
        <a href="/manual#node-configuration">standard pubsub setup</a> 
        with simply the event name changed.</p>

        <h4>Get node configuration</h4>

        <pre class="out callback" message="xmpp.buddycloud.config.get">
        socket.emit(
            'xmpp.buddycloud.config.get',
            {
                "node": "xmpp-ftw updates"
            },
            function(error, data) { console.log(error, data) }
        )
        </pre>

        <h4>Set node configuration</h4>

        <pre class="out callback" message="xmpp.buddycloud.config.set">
        socket.emit(
            'xmpp.buddycloud.config.set',
            {
                "node": "xmpp-ftw updates",
                "form": []
            },
            function(error, data) { console.log(error, data) }
        )
        </pre>

        <p>If configuration update is sucessful then `<em>data</em>` will simply be <b>true</b>.</p>

        <h5>Node configuration update notification</h5>

        <p>On update of a node's configuration then a notification will be
        sent to all node subscribers.</p>

        <pre class="in" message="xmpp.buddycloud.push.configuration">
        socket.on('xmpp.buddycloud.push.configuration', function(data) {
            console.log(data)
        })
        </pre>

        <p>With data looking as follows:</p>

        <pre class="example">
        {
            node: '/user/weather@topics.evilprofessor.co.uk',
            configuration: []
        }
        </pre>

        <p><strong>configuration</strong> if provided will match the parsing
        of other <a href="/data-forms" title="Data forms">data forms</a>.</p>

<% include ./partials/footer %>
