<%
    body.id = ''
    pageTitle = "Buddycloud extension for XMPP-FTW"
%>
<% include ./partials/head %>

<div id="toc"></div>

<p><a href="http://www.buddycloud.com" target="_blank">Buddycloud</a>
is a open source/standards federated social network built on top
of XMPP. For more information about the future of social networking
please see the
<a href="http://www.buddycloud.com" target="_blank">buddycloud website</a>.</p>

<h2>Discover buddycloud server</h2>

<p>The first thing you must do is to discover your buddycloud
server. <strong>Any attempted actions before the discovery
will result in an error response</strong>.</p>

<pre class="out callback" message="xmpp.buddycloud.discover">
socket.send(
    'xmpp.buddycloud.discover',
    { /* "server": "channels.buddycloud.org" */ },
    function(error, data) { console.log(error, data) }
)
</pre>

<p>If a server is discovered the `<em>data</em>` will contain the
channel server host, if not `<em>error</em>` will be populated to
tell you that no server was found.</p>

<p>Providing a `<em>server</em>` key allows the user to short cut
discovery by specifying the channel server they wish to use.</p>

<p>There is a default timeout of 8 seconds on the second part of the 
discovery process (where we ask components for features/identity). If 
a server is found before this time then xmpp-ftw will inform you immediately. 
This value can be changed server-side by calling the <pre>setDiscoveryTimeout</pre> 
method on a Buddycloud object.</p>

<h3>Disco requests</h3>

<p>For convenience, `<em>xmpp-ftw-buddycloud</em>` proxies disco requests
for the user using the two events
<strong>xmpp.buddycloud.discover.items</strong> and
<strong>xmpp.buddycloud.discover.info</strong> (
<strong>xmpp.discover.items</strong> and
<strong>xmpp.discover.info</strong> respectively).</p>

<p>These events are documented in
<a href="/manual/service-discovery" title="XEP-0030 service discovery">
service discovery</a>. <strong>Note:</strong> these events do not require
that the channel server is discovered first.</p>

<h2>Presence</h2>

<p>Presence must be sent to the buddycloud server in order to
start receiving notifications. Default presence is set as 'online'
with a priority of -1, and a status of 'buddycloud'.</p>

<p>For more advanced priority setting it is suggested that you use
'<em>xmpp.presence</em>'.</p>

<pre class="out" message="xmpp.buddycloud.presence">
socket.send('xmpp.buddycloud.presence', {})
</pre>

<h2>Registration</h2>

<p>The first time you use a buddycloud server you should register with
it in order to generate your personal nodes. Multiple registrations
will not cause an error.</p>

<pre class="out callback" message="xmpp.buddycloud.register">
socket.send(
    'xmpp.buddycloud.register',
    {},
    function(error, data) { console.log(error, data) }
)
</pre>

<p>A successful response will look as follows:</p>

<pre class="example">
{ registered: true }
</pre>

<p>In the unlikely event of an error upon registration these will formatted
in the same style as <a href="/manual/in-band-registration">xmpp-ftw-register</a>.</p>

<h2>Create a node</h2>

<pre class="out callback" message="xmpp.buddycloud.create">
socket.send(
    'xmpp.buddycloud.create',
    {
        "node": "/user/weather@topics.evilprofessor.co.uk/posts",
     /* "options": [] */
    },
    function(error, data) { console.log(error, data) }
)
</pre>

<p><strong>options</strong> should be formatted as a data form
in order to add node configuration options at creation time.</p>

<p>If the node is successfully created `<em>error</em>` will be <b>null</b> and
`<em>data</em>` will be <b>true</b>.</p>

<h2>Publishing to a node</h2>

<pre class="out callback" message="xmpp.buddycloud.publish">
socket.send(
    'xmpp.buddycloud.publish',
    {
        "node": "/user/lloyd@buddycloud.org/posts",
        "content": {
            "atom": {
                "content": "Posting from XMPP-FTW"
            },
            "in-reply-to": { "ref": "1234-5678-9087-6543" }
        }
    },
    function(error, data) { console.log(error, data) }
</pre>

<p>A successful post will result in the following response:</p>

<pre class="example">
{
    "id": "tag:null@channels.evilprofessor.co.uk,/user/lloyd@evilprofessor.co.uk/posts,1"
}
</pre>

<h2>Subscriptions</h2>

<h3>Subscribe to a node</h3>

<pre class="out callback" message="xmpp.buddycloud.subscribe">
socket.send(
    'xmpp.buddycloud.subscribe',
    {
        "node": "/user/lloyd@buddycloud.org/posts"
    },
    function(error, data) { console.log(error, data) }
)
</pre>

<p>If a subscription is successful then the value of `<em>data</em>`
will be as follows:</p>

<pre class="example">
{
    subscription: "subscribed"
}
</pre>

<h3>Unsubscribe from a node</h3>

<pre class="out callback" message="xmpp.buddycloud.unsubscribe">
socket.send(
    'xmpp.buddycloud.unsubscribe',
    {
        "node": "/user/lloyd@buddycloud.org/posts"
    },
    function(error, data) { console.log(error, data) }
)
</pre>

<p>If there is no `<em>error</em>` then `<em>data</em>` will
simply be true.</p>

<h3>Get subscriptions</h3>

<p>This method supports RSM.</p>

<pre class="out callback" message="xmpp.buddycloud.subscriptions">
socket.send(
    'xmpp.buddycloud.subscriptions',
    {
     /* "node": "/user/weather@topics.evilprofessor.co.uk/posts", */
     /* "owner": true */
    },
    function(error, data) { console.log(error, data) }
)
</pre>

<p>Setting <strong>owner</strong> to true will return information
about all subscriptions to that node. This is provided you are
the owner of the node, otherwise an error will be returned.</p>

<p>A successful response will then be as follows:</p>

<pre class="example">
[
    {
        node: "/user/lloyd@evilprofessor.co.uk/posts",
        jid: { user: "lloyd", domain: "evilprofessor.co.uk" },
        subscription: "subscribed"
    },
    {
        node: "/user/megan@evilprofessor.co.uk/posts",
        jid: { user: "lloyd", domain: "evilprofessor.co.uk" },
        subscription: "pending"
    },
    {
        node: "/user/lloyd@evilprofessor.co.uk/posts",
        jid: { user: "megan", domain: "evilprofessor.co.uk" },
        invitedBy: { user: "lloyd", domain: "evilprofessor.co.uk" },
        subscription: "invited"
    }
]
</pre>

<h3>Updating a subscribers subscription</h3>

<p>As a node owner, or moderator, it is also possible to update
the subscription state of a user as follows:</p>

<pre class="out callback" message="xmpp.buddycloud.subscription">
socket.send(
    'xmpp.buddycloud.subscription',
    {
        "node":          "/user/lloyd@evilprofessor.co.uk/posts",
        "jid":           "bad-person@evilprofessor.co.uk",
        "subscription" : "none"
    },
    function(error, data) { console.log(error, data) }
)
</pre>

<p>On success the <em>data</em> argument will simply be
<strong>true</strong>.</p>

<h3>Inviting a user to a node</h3>

<p>As a subscriber it is possible to invite another user to a node as follows:</p>

<pre class="example">
socket.send(
    'xmpp.buddycloud.subscription',
    {
        "node":          "/user/lloyd@evilprofessor.co.uk/posts",
        "jid":           "megan@evilprofessor.co.uk",
        "subscription" : "invited"
    },
    function(error, data) { console.log(error, data) }
)
</pre>

<p>On success the <em>data</em> argument will simply be
<strong>true</strong>.</p>

<h3>Notification of a subscription change</h3>

<p>In the event of a subscription change all node subscribers
are informed via the `<em>xmpp.buddycloud.push.subscription</em>`
event:</p>

<pre class="in" message="xmpp.buddycloud.push.subscription">
{
    node: "/user/weather@topics.evilprofessor.co.uk/posts",
    jid: {
        domain: "evilprofessor.co.uk",
        user: "megan"
    },
    subscription: "subscribed",
 /* invitedBy: {
        domain: "evilprofessor.co.uk",
        user: "lloyd"
    } */
}
</pre>

<h3>Subscription authorisation request</h3>

<p>If required, and if supported by the server, a node owner,
or moderator, will receive a subscription authorisation request
as follows:</p>

<pre class="in callback" message="xmpp.buddycloud.push.authorisation">
socket.on('xmpp.buddycloud.push.authorisation', function(data, callback) {
    console.log(data)
    callback( /* see below */ )
})
</pre>

<p>With the data in the following format:</p>

<pre class="example">
{
    id: "approve1",
    form: {}
}
</pre>

<ul>
  <li>The `<em>form</em>` property being parsed as a standard
  <a href="/manual/data-forms" title="Data form">data form</a>.</li>
  <li>The data form will contain node information, therefore this
  is not included in the standard fields.</li>
</ul>

<p>In order to reply to a subscription authorisation request the
callback function should be used as follows (actual field data
will depend on received data form):</p>

<pre class="example">
[
    { var: "pubsub#node", value: "/user/lloyd@evilprofessor.co.uk/posts" },
    { var: "pubsub#subscriber_jid": value: "megan@evilprofessor.co.uk" },
    { var: "pubsub#allow", value: "true" }
]
</pre>

<h2>Affiliations</h2>

<h3>Get node affiliations</h3>

<p>This method supports RSM.</p>

<pre class="out callback" message="xmpp.buddycloud.affiliations">
socket.send(
    'xmpp.buddycloud.affiliations',
    {
     /* "node": "/user/lloyd@evilprofessor.co.uk/posts", */
     /* "owner": true" */
    },
    function(error, data) { console.log(error, data) }
)
</pre>

<p>Setting <strong>owner</strong> to true allows the user to
get a list of all node affiliations provided they are the owner
of the node (otherwise an error is returned.</p>

<p>A successful response will then be as follows:</p>

<pre class="example">
[
   {
        jid: { user: "lloyd", domain: "evilprofessor.co.uk" },
        affiliation: 'owner'
   },
   {
        jid: { user: "dev-kitty-1", domain: "evilprofessor.co.uk" },
        affiliation: 'member'
   }
]
</pre>

<h3>Set node affiliation</h3>

<pre class="out callback" message="xmpp.buddycloud.affiliation">
socket.send(
    'xmpp.buddycloud.affiliation',
    {
        "node": "/user/lloyd@evilprofessor.co.uk/posts",
        "jid": "troll@underthebrid.ge",
        "affiliation": "outcast"
    },
    function(error, data) { console.log(error, data) }
)
</pre>

<p>If the node is successfully created `<em>error</em>` will be <b>null</b> and
`<em>data</em>` will be <b>true</b>.</p>

<p><b>Note:</b> Whilst specification allows user to update several
affiliation changes at once, only on per message is supported
here. If required it can be added later.</p>

<h3>Notification of affiliation changes</h3>

<p>The event name for these changes is `<em>xmpp.buddycloud.push.affiliation</em>`.</p>

<pre class="in" message="xmpp.buddycloud.push.affiliation">
{
    node: "/user/lloyd@evilprofessor.co.uk/posts",
    jid: {
        domain: "evilprofessor.co.uk",
        user: "bad-person"
    },
    affiliation: "none"
}
</pre>

<h2>Items</h2>

<h3>Retrieve items</h3>

<p>Retrieve items from a buddycloud node. For information about
how RSM is supported please see
<a href="/manual/result-set-management">result set management</a>.</p>

<pre class="out callback" message="xmpp.buddycloud.retrieve">
socket.send(
    'xmpp.buddycloud.retrieve',
    {
        "node": "/user/lloyd@buddycloud.org/posts"
    },
    function(error, data) { console.log(error, data) }
)
</pre>

<p>Items are parsed using `<a href="/manual/item-parser">xmpp-ftw-item-parser</a>` although it is
possible to inject your own parser.  Additonal features of the
item will be come available as this project adds support.</p>

<p>Unlike `xmpp-ftw-pubsub` items will always include a
<strong>node</strong> key.</p>

<h3>Notification of new messages</h3>

<p>When an item is published to a node that your user is
subscribed to then a message will be received with item
details.</p>

<pre class="in" message="xmpp.buddycloud.push.item">
socket.on('xmpp.buddycloud.push.item', function(data) {
    console.log(data)
})
</pre>

<p>The item itself is parsed by `<em><a href="/manual/item-parser">xmpp-ftw-item-parser</a></em>`
and is held in the <strong>item</strong> key.</p>

<pre class="example">
{
    from: 'channels.evilprofessor.co.uk',
    node: '/user/weather@server.com/posts',
    id:   '201305301825',
    item: ...as parsed by xmpp-ftw-item-parser...
}
</pre>

<h3>Retrieve recent items</h3>

<p>Retrieve recent items for subscribed nodes by requesting using
the following event name (this message supports
<a href="/manual/result-set-management"
   title="Result set management">RSM</a>):</p>

<pre class="out callback" message="xmpp.buddycloud.items.recent">
socket.send(
    'xmpp.buddycloud.items.recent',
    {
      /* "max": 50, */
      /* "since": "2013-07-01 16:02:00", */
      /* "parentOnly": true */
    },
    function(error, data, rsm) { console.log(error, data, rsm) }
)
</pre>

<p>Whilst both <em>max</em> and <em>since</em> are optional it is
suggested values are provided. <em>max</em> will default to
<strong>30</strong> if not set, whilst <em>since</em> will default
to <strong>1st January 2000</strong> if not set. <em>since</em> will
accept any string which can be parsed by <code>Date.parse()</code>. Setting 
<em>parentOnly</em> with something that evaluates to <strong>true</strong> 
will request only thread parents.</p>

<p>Output data has the following format:</p>

<pre class="example">
[
    {
        node: '/user/lloyd@evilprofessor.co.uk/posts',
        id: 'item-1',
        entry: //... a parsed by xmpp-ftw-item-parser ...//
    },
    {
        node: '/user/megan@evilprofessor.co.uk/posts',
        id: 'item-3',
        entry: //... a parsed by xmpp-ftw-item-parser ...//
    },
    {
        node: '/user/lloyd@evilprofessor.co.uk/posts',
        id: 'item-5',
        entry: //... a parsed by xmpp-ftw-item-parser ...//
    },

]
</pre>

<h3>Retrieve user feed</h3>

<p>Very similar to the recent items retrieval, except that it does not attempt to retrieve items from every channel regardless of age.  This 
function returns a feed as if all items are in a single feed 
(this message supports
<a href="/manual/result-set-management"
   title="Result set management">RSM</a>):</p>

<pre class="out callback" message="xmpp.buddycloud.items.recent">
socket.send(
    'xmpp.buddycloud.items.feed',
    {
      /* "since": "2013-07-01 16:02:00", */
      /* "parentOnly": true */
    },
    function(error, data, rsm) { console.log(error, data, rsm) }
)
</pre>

<p>Whilst <em>since</em> are optional it is
suggested the value is provided. <em>since</em> will default
to <strong>1st January 2000</strong> if not set. <em>since</em> will
accept any string which can be parsed by <code>Date.parse()</code>. Setting 
<em>parentOnly</em> with something that evaluates to <strong>true</strong> 
will request only thread parents.</p>

<p>Output data has the following format:</p>

<pre class="example">
[
    {
        node: '/user/lloyd@evilprofessor.co.uk/posts',
        id: 'item-1',
        entry: //... a parsed by xmpp-ftw-item-parser ...//
    },
    {
        node: '/user/megan@evilprofessor.co.uk/posts',
        id: 'item-3',
        entry: //... a parsed by xmpp-ftw-item-parser ...//
    },
    {
        node: '/user/lloyd@evilprofessor.co.uk/posts',
        id: 'item-5',
        entry: //... a parsed by xmpp-ftw-item-parser ...//
    },

]
</pre>

<h3>Item Thread</h3>

<p>Retrieve a full post thread as follows (RSM supported):</p>

<pre class="out callback" message="xmpp.buddycloud.items.thread">
socket.send(
    'xmpp.buddycloud.items.thread',
    {
        "node": "/user/lloyd@evilprofessor.co.uk/posts",
        "id": "1234-5678-9012-3456"
    },
    function(error, data, rsm) { console.log(error, data, rsm) }
)
</pre>

<p>Responses then look like the following:</p>

<pre class="example">
[
    {
        id: '1234-5678-9012-3457',
        node: "/user/lloyd@evilprofessor.co.uk/posts",
        entry: //... as parsed by xmpp-ftw-item-parser ...//
    }
]
</pre>

<h3>Item Replies</h3>

<p>Retrieve all replies to a post as follows (RSM supported):</p>

<pre class="out callback" message="xmpp.buddycloud.items.replies">
socket.send(
    'xmpp.buddycloud.items.replies',
    {
        "node": "/user/lloyd@evilprofessor.co.uk/posts",
        "id": "1234-5678-9012-3456"
    },
    function(error, data, rsm) { console.log(error, data, rsm) }
)
</pre>

<p>Responses then look like the following:</p>

<pre class="example">
[
    {
        id: '1234-5678-9012-3457',
        entry: //... as parsed by xmpp-ftw-item-parser ...//
        node: "/user/lloyd@evilprofessor.co.uk/posts",
    }
]
</pre>

<h3>Delete an item</h3>

<pre class="out callback" message="xmpp.buddycloud.item.delete">
socket.send(
    'xmpp.buddycloud.item.delete',
    {
        "node": "/user/lloyd@buddycloud.org/posts",
        "id": "1"
    },
    function(error, data) { console.log(error, data) }
)
</pre>

<p>If the delete is successful then `<em>data</em>` will simply
be <strong>true</strong>.</p>

<h4>Item deletion notification</h4>

<p>If an item is successfully deleted from a node then all
subscribers will be notified of this event (configuration
dependent).</p>

<pre class="in" message="xmpp.buddycloud.push.retract">
socket.on('xmpp.buddycloud.push.retract', function(data) {
    console.log(data)
})
</pre>

<p>With the payload as follows:</p>

<pre class="example">
{
    node: '/user/weather@topics.evilprofessor.co.uk',
    id: '222'
}
</pre>

<h2>Configuring a node</h2>

<p>Node configuration follows that of the
<a href="/manual#node-configuration">standard pubsub setup</a>
with simply the event name changed.</p>

<h3>Get node configuration</h3>

<pre class="out callback" message="xmpp.buddycloud.config.get">
socket.send(
    'xmpp.buddycloud.config.get',
    {
        "node": "/user/weather@topics.evilprofessor.co.uk/posts"
    },
    function(error, data) { console.log(error, data) }
)
</pre>

<h3>Set node configuration</h3>

<pre class="out callback" message="xmpp.buddycloud.config.set">
socket.send(
    'xmpp.buddycloud.config.set',
    {
        "node": "/user/weather@topics.evilprofessor.co.uk/posts",
        "form": []
    },
    function(error, data) { console.log(error, data) }
)
</pre>

<p>If configuration update is sucessful then `<em>data</em>` will simply be <b>true</b>.</p>

<h4>Node configuration update notification</h4>

<p>On update of a node's configuration then a notification will be
sent to all node subscribers.</p>

<pre class="in" message="xmpp.buddycloud.push.configuration">
socket.on('xmpp.buddycloud.push.configuration', function(data) {
    console.log(data)
})
</pre>

<p>With data looking as follows:</p>

<pre class="example">
{
    node: '/user/weather@topics.evilprofessor.co.uk/posts',
    configuration: []
}
</pre>

<p><strong>configuration</strong> if provided will match the parsing
of other <a href="/manual/data-forms" title="Data forms">data forms</a>.</p>

<h2>Discovering media servers</h2>

<p>Media servers can be discovered using the method below. Domain is the domain 
on which the channel you wish to post to lives. Note: If you are attempting to 
post to a topic channel you will need to run the discovery against the parent 
domain (usually a case of just removing the subdomain).</p>

<pre class="out callback" message="xmpp.buddycloud.discover.media-server">
socket.send(
    'xmpp.buddycloud.disover.media-server',
    {
        "of": "evilprofessor.co.uk"
    },
    function(error, data) { console.log(error, data) }
)
</pre>

<p>If a media server component can not be found then the error message will be 
an <em>item-not-found</em> error. A successful response is as follows:</p>

<pre class="example">
{
    component: 'media.evilprofessor.co.uk',
 /* endpoint: 'https://api.evilprofessor.co.uk/media' */
}
</pre>

<p>The <strong>endpoint</strong> will only be provided if the media server 
advertises it.</p>

<p>There is a default timeout of 10 seconds on the second part of the 
media server discovery process (where we ask components for features/identity). If 
a server is found before this time then xmpp-ftw will inform you immediately. 
This value can be changed server-side by calling the 
<pre>setMediaServerDiscoveryTimeout</pre> method on a Buddycloud object.</p>

<h2>Verifying HTTP requests</h2>

<p>If a media server has been discovered then <em>xmpp-ftw-buddycloud</em> will 
take over handling of HTTP verification requests from this server.</p>

<p>The HTTP verfication is detailed on the 
<a href="/manual/http-requests" title="XEP-0070 Verifying HTTP requests via XMPP">manual page</a> 
and here we simply show the related events.</p>

<p>An incoming verification request is picked up as follows:</p>

<pre class="in" message="xmpp.buddycloud.http.verify">
socket.on(
    'xmpp.buddycloud.http.verify',
    function(data) { console.log(data) }
)
</pre>

<p>This request can then either be confirmed or denied as follows. Approve:</p>

<pre class="out callback" message="xmpp.buddycloud.http.confirm">
socket.send(
    'xmpp.buddycloud.http.confirm',
    { 
        "to": "media.evilprofessor.co.uk",
        "id": "abc-123",
        "type": "iq",
        "request": {
            "url": "https://media.evilprofessor.co.uk/secret.txt",
            "method": "GET",
            "id": "request-1"
        }

    },
    function(error, data) { console.log(error, data) }
)
</pre>

<p>Deny:</p>

<pre class="out callback" message="xmpp.buddycloud.http.deny">
socket.send(
    'xmpp.buddycloud.http.deny',
    { 
        "to": "media.evilprofessor.co.uk",
        "id": "abc-123",
        "type": "iq",
        "request": {
            "url": "https://media.evilprofessor.co.uk/secret.txt",
            "method": "GET",
            "id": "request-1"
        }

    },
    function(error, data) { console.log(error, data) }
)
</pre>
<% include ./partials/footer %>
