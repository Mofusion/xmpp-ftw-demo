<% 
    body.id = ''
    pageTitle = "XEP-0077 In-Band Registration"
%>
<% include ./partials/head %>

        <div id="toc"></div>
 
        <h3>Get registration information</h3>
        
        <pre class="out callback" message="xmpp.register.get">
        socket.send(
            'xmpp.register.get',
            { 
                "to": "evilprofessor.co.uk"
            },
            function(error, data) { console.log(error, data) }
        )
        </pre>
        
        <p>Example response:</p>
        
        <pre class="example">
        {
          instructions: 'Please provider username, email, password',
          email: true,
          username: true,
          password: true
        }
        </pre>

        <p>Registration information can also be returned with a 
        <a href="/manual/data-forms">data form</a> which will be 
        provided under the <em>form</em> key.</p>

        <p>For an already registered entity the response may look like this:</p>
        
        <pre class="example">
        {
            email: 'lloyd@evilprofessor.co.uk',
            username: 'lloydwatkin',
            password: 'xmpp-ftw-password',
            registered: true
        }
        </pre>

        <p>Finally registration infomration may be provided 
        '<a href="/manual/out-of-band-data">out of band</a>' via 
        <a href="http://xmpp.org/extensions/xep-0066.html">XEP-0066</a> 
        support. This information (if provided) would be held in the 
        <em>oob</em> key</p>

        <h3>Register</h3>

        <p>One you are ready to register then registration can be 
        performed with data matching that from <em>xmpp.register.get</em> 
        information.</p>

        <pre class="out callback" message="xmpp.register.set">
        socket.send(
            'xmpp.register.set',
            {
                "to": "evilprofessor.co.uk",
             /* "email": "lloyd@evilprofessor.co.uk", */
             /* "username": "lloydwatkin",            */
             /* "password": "xmpp-ftw-password",      */
             /* "form": [ ]                           */
            },
            function(error, data) { console.log(error, data) }
        )
        </pre>

        <p>All data, other than <em>to</em> here is optional as it 
        depends on the information requested by the service. 
        <a href="/manual/data-forms">Data forms</a> can be passed 
        back using the standard <strong>xmpp-ftw</strong> format 
        (with <em>FORM_TYPE</em> field not required).</p>

        <p>A successful request will result in the <strong>data</strong> 
        argument having a property of <em>registered</em> which will equal 
        <strong>true</strong>.</p>

        <h3>Unregister</h3>

        <p>It is possible to unregister from an entity as follows:</p>

        <pre class="out callback" message="xmpp.register.unregister">
        socket.send(
            'xmpp.register.unregister',
            {
                "to": "evilprofessor.co.uk",
             /* "form": [] */
            },
            function(error, data) { console.log(error, data) }
        )
        </pre>

        <p>Should unregistering succeed then the <em>data</em> argument will 
        simply be <strong>true</strong>. However if unregistering fails it 
        may include a data form to be submitted in order to unregister as 
        follows:</p>

        <pre class="example">
        {
            type: "cancel",
            condition: "not-allowed",
            form: {
                /* ... standard data form ... */
            }
        }
        </pre>

        <p>In order to complete unregistering process make the same 
        <strong>xmpp.register.unregister</strong> again with the 
        <em>form</em> parameter completed.</p>

        <h3>Changing password</h3>

        <p>Passwords can be changed as follows:</p>

        <pre class="out callback" message="xmpp.register.password">
        socket.send(
            'xmpp.register.password',
            {
                "to": "evilprofessor.co.uk",
             /* "username": "lloydwatkin", */
             /* "password": "xmpp-ftw-password", */
             /* "form": [] */
            },
            function(error, data) { console.log(error, data) }
        )
        </pre>          

        <p>A successful response will come back as follows:</p>

        <pre class="example">
        { registered: true }
        </pre>

        <p>Errors can potentially include a 
        <a href="">data form</a> with instructions on what data 
        is required for a successful password change.</p>

        <pre class="example">
        {
            type: "cancel",
            condition: "not-allowed",
            form: {
                /* ... standard data form ... */
            }   
        }   
        </pre>

        <h3>Out of band data</h3>

        <p>Should the server request that any stage of registering, 
        unregistering, or changing password take place 
        <a href="/manual/out-of-band-data">"Out of Band"</a> (e.g. 
        via a web page) then this data will be provided in a 
        <em>oob</em> property of the data response.</p>

<% include ./partials/footer %>
