<%
    pageTitle = 'Publishing to PubSub Nodes'
%>
<% include ./partials/head %>

<div id="toc"></div>

<h2>Publishing to PubSub Nodes (XEP-0060)</h2>

<p>Publishing (and indeed reading) data to pubsub nodes is handled by the item 
parser code. At present this is part of XMPP-FTW but may in future be split 
out for the use of others.</p>

<p>The base folder for the item parser code lives here: 
<a href="https://github.com/lloydwatkin/xmpp-ftw/tree/master/lib/utils/item-parser" 
target="_blank">https://github.com/lloydwatkin/xmpp-ftw/tree/master/lib/utils/item-parser</a></p>

<p>The code is new and therefore may change until a suitable format is found.</p>

<h2>What are we trying to achieve?</h2>

<p>The item parser, like XMPP-FTW itself, is not designed to be a generic XML↔JSON parser. 
Its aim is to take a known subset of popular data formats and enable the buidling of valid 
XML payloads, and conversely taking valid XML data payloads and translating these into 
sensible JSON.</p>

<p>In the short term I foresee the support of 
<a href="http://en.wikipedia.org/wiki/Atom_(standard)" target="_blank">ATOM</a> 
payloads and a couple of the popular extensions, e.g. 
<a href="http://activitystrea.ms/" target="_blank">Activity streams</a>.</p>

<p><strong>Note:</strong> While building XML payloads the parser should try and 
fill in any missing required data with suitable values but it is not designed 
to check that the data provided builds a standards compliant payload.</p>

<h2>How it works</h2>

<h3>XML→JSON</h3>

<p>A range of parsers are called in a loop each adding to the JSON object as 
appropriate if the format suits.</p>

<p>Most of the parsers are able to detect the presence of their XMLNS and can exit 
quickly if its parsing is not appropriate for the payload.</p>

<h3>JSON→XML</h3>

<p>Building valid XML payloads is slightly more complex than translating XML data formats 
to JSON. The current methodology is to use an associative array to tell the parser that 
it has work to do for the passed JSON object. As usual the best description is via 
an example so here we'll do a minimal ATOM post.</p>

<pre class="example" title="JSON payload">
    {
        to: "pubsub.evilprofessor.co.uk",
        node: "xmpp-ftw updates",
        content: [
            atom: {
                title: "XMPP-FTW is able to post simple ATOM posts!",
                links: [
                    { href: "http://tools.ietf.org/html/rfc4287" }
                ],
                summary: "XMPP-FTW"
            }
        ]
    }
</pre>

<p>Which would build the following XML payload:</p>

<pre class="example" title="XML payload">
    &lt;iq type="set"
        to="pubsub.evilprofessor.co.uk"
        id="1"&gt;
        &lt;pubsub xmlns="http://jabber.org/protocol/pubsub"&gt;
            &lt;publish node="xmpp-ftw updates"&gt;
                &lt;item&gt;
                    &lt;entry xmlns="http://www.w3.org/2005/Atom"&gt;
                        &lt;title&gt;XMPP-FTW is able to post simple ATOM posts!&lt;/title&gt;
                        &lt;link href="http://tools.ietf.org/html/rfc4287"/&gt;
                        &lt;id&gt;urn:uuid:123456&lt;/id&gt;
                        &lt;updated&gt;2013-05-12T21:00:00Z&lt;/updated&gt;
                        &lt;summary&gt;XMPP-FTW&lt;/summary&gt;
                    &lt;/entry&gt;
               &lt;item&gt;
           &lt;/publish&gt;
       &lt;/pubsub&gt;
   &lt;/iq&gt;
</pre>

<p>In the above JSON payload the user was able to omit the <em>updated date</em> 
and the item <em>id</em> as these can be generated by the parser.</p>

<% include ./partials/footer %>
